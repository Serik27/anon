import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot configuration from .env
ADMIN_BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
ADMIN_USER_ID = os.getenv('ADMIN_USER_ID')

if not ADMIN_BOT_TOKEN or not ADMIN_USER_ID:
    raise ValueError("ADMIN_BOT_TOKEN and ADMIN_USER_ID must be set in .env file")

# Initialize bot and dispatcher
bot = Bot(token=ADMIN_BOT_TOKEN)
dp = Dispatcher()

def is_admin(user_id: int) -> bool:
    """Check if user is admin"""
    return str(user_id) == ADMIN_USER_ID

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """Handle /start command"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    await message.answer(
        "üõ°Ô∏è **–ë–æ—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∫–∞—Ä–≥ - –í–µ—Ä—Å—ñ—è 2.0**\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –º–æ–¥–µ—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤–µ–ª–∏–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∫–∞—Ä–≥.\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
        "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ /ban [id/username] - –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "‚Ä¢ /unban [id/username] - —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "‚Ä¢ /list_messages [id/username] - –ø–æ–∫–∞–∑–∞—Ç–∏ –±–µ—Å—ñ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (18-20 —Å–∫–∞—Ä–≥)\n"
        "‚Ä¢ /list_report [id/username] - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ 10+ —Å–∫–∞—Ä–≥–∞–º–∏\n"
        "‚Ä¢ /help - –¥–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞\n\n"
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ—Ç—Ä–∞–ø–ª—è—é—Ç—å –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–∏ 20+ —Å–∫–∞—Ä–≥–∞—Ö."
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """Handle /help command"""
    if not is_admin(message.from_user.id):
        return
    
    help_text = """
üõ°Ô∏è **–î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É –æ–±—Ä–æ–±–∫–∏ —Å–∫–∞—Ä–≥**

**–ö–æ–º–∞–Ω–¥–∏:**

üöÄ **/start**
–ó–∞–ø—É—Å–∫ —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ü–æ–∫–∞–∑—É—î –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.

üö´ **/ban [id/username]**
–ë–ª–æ–∫—É—î –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —á–∞—Ç—É –Ω–∞–∑–∞–≤–∂–¥–∏.
–ü—Ä–∏–∫–ª–∞–¥–∏:
‚Ä¢ `/ban 123456789`
‚Ä¢ `/ban @username`

‚úÖ **/unban [id/username]**
–ü—Ä–∏–±–∏—Ä–∞—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–º —á–∞—Ç–æ–º.
–ü—Ä–∏–∫–ª–∞–¥–∏:
‚Ä¢ `/unban 123456789`
‚Ä¢ `/unban @username`

üìù **/list_messages [id/username]**
–ü–æ–∫–∞–∑—É—î –±–µ—Å—ñ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∫–æ–ª–∏ –≤ –Ω—å–æ–≥–æ –±—É–ª–æ 18-20 —Å–∫–∞—Ä–≥.
–í—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É, –∫–æ–ª–∏ –Ω–∞–∫–æ–ø–∏—á—É–≤–∞–ª–∏—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–∫–∞—Ä–≥–∏.
–ü—Ä–∏–∫–ª–∞–¥–∏:
‚Ä¢ `/list_messages 123456789`
‚Ä¢ `/list_messages @username`

üìä **/list_report [id/username]**
–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ 10+ —Å–∫–∞—Ä–≥–∞–º–∏ —É –≤–∏–≥–ª—è–¥—ñ inline –∫–Ω–æ–ø–æ–∫.
–ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –π–æ–≥–æ –±–µ—Å—ñ–¥–∏.
–ü—Ä–∏–∫–ª–∞–¥:
‚Ä¢ `/list_report` - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö
‚Ä¢ `/list_report 123456789` - –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ

‚ùì **/help**
–ü–æ–∫–∞–∑—É—î —Ü—é –¥–µ—Ç–∞–ª—å–Ω—É –¥–æ–ø–æ–º–æ–≥—É.

**–õ–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏:**
1. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Å–∫–∞—Ä–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π –±–æ—Ç
2. –ü—Ä–∏ 18 —Å–∫–∞—Ä–≥–∞—Ö –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–µ—Å—ñ–¥
3. –ü—Ä–∏ 20 —Å–∫–∞—Ä–≥–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—Ç—Ä–∞–ø–ª—è—î –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
4. –ê–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–µ—Å—ñ–¥–∏ –∑ 18-20 —Å–∫–∞—Ä–≥–∏
5. –ê–¥–º—ñ–Ω –ø—Ä–∏–π–º–∞—î —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
"""
    
    await message.answer(help_text)

@dp.message(Command("ban"))
async def ban_command(message: types.Message):
    """Handle /ban command"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    # Parse command arguments
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.answer(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏**\n\n"
            "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
            "‚Ä¢ `/ban 123456789` - –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ ID\n"
            "‚Ä¢ `/ban @username` - –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ username"
        )
        return
    
    target = args[0]
    user_id = await resolve_user_id(target)
    
    if not user_id:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {target}")
        return
    
    # Block user
    from complaints_system import block_user, get_user_info_for_complaint
    
    try:
        block_user(user_id, message.from_user.id, "–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        user_info = get_user_info_for_complaint(user_id)
        user_name = user_info['first_name'] if user_info else '–ù–µ–≤—ñ–¥–æ–º–æ'
        
        await message.answer(
            f"üö´ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ**\n\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}\n"
            f"üÜî ID: `{user_id}`\n"
            f"üëÆ –ó–∞–±–ª–æ–∫—É–≤–∞–≤: {message.from_user.first_name}\n"
            f"üìÖ –ß–∞—Å: {message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–º —á–∞—Ç–æ–º."
        )
        
        logger.info(f"User {user_id} banned by admin {message.from_user.id}")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ: {e}")

@dp.message(Command("unban"))
async def unban_command(message: types.Message):
    """Handle /unban command"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    # Parse command arguments
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.answer(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏**\n\n"
            "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
            "‚Ä¢ `/unban 123456789` - —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ ID\n"
            "‚Ä¢ `/unban @username` - —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ username"
        )
        return
    
    target = args[0]
    user_id = await resolve_user_id(target)
    
    if not user_id:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {target}")
        return
    
    # Unblock user
    from complaints_system import unblock_user, get_user_info_for_complaint
    
    try:
        unblock_user(user_id)
        
        user_info = get_user_info_for_complaint(user_id)
        user_name = user_info['first_name'] if user_info else '–ù–µ–≤—ñ–¥–æ–º–æ'
        
        await message.answer(
            f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ**\n\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}\n"
            f"üÜî ID: `{user_id}`\n"
            f"üëÆ –†–æ–∑–±–ª–æ–∫—É–≤–∞–≤: {message.from_user.first_name}\n"
            f"üìÖ –ß–∞—Å: {message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–Ω–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–º —á–∞—Ç–æ–º."
        )
        
        logger.info(f"User {user_id} unblocked by admin {message.from_user.id}")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ: {e}")

@dp.message(Command("list_messages"))
async def list_messages_command(message: types.Message):
    """Handle /list_messages command"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    # Parse command arguments
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.answer(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏**\n\n"
            "**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
            "‚Ä¢ `/list_messages 123456789` - –ø–æ–∫–∞–∑–∞—Ç–∏ –±–µ—Å—ñ–¥–∏ –∑–∞ ID\n"
            "‚Ä¢ `/list_messages @username` - –ø–æ–∫–∞–∑–∞—Ç–∏ –±–µ—Å—ñ–¥–∏ –∑–∞ username"
        )
        return
    
    target = args[0]
    user_id = await resolve_user_id(target)
    
    if not user_id:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {target}")
        return
    
    # Get user messages from critical period (18-20 complaints)
    from complaints_system import get_critical_period_messages, get_user_info_for_complaint
    
    try:
        messages = get_critical_period_messages(user_id)
        user_info = get_user_info_for_complaint(user_id)
        user_name = user_info['first_name'] if user_info else '–ù–µ–≤—ñ–¥–æ–º–æ'
        
        if not messages:
            await message.answer(
                f"üìù **–ë–µ—Å—ñ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name} (ID: {user_id})\n"
                f"‚ùå –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –±–µ—Å—ñ–¥ –∑ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É (18-20 —Å–∫–∞—Ä–≥)"
            )
            return
        
        # Format messages
        messages_text = f"üìù **–ë–µ—Å—ñ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É**\n\n"
        messages_text += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name} (ID: {user_id})\n"
        messages_text += f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(messages)}\n\n"
        
        for i, msg in enumerate(messages[:10], 1):  # Show first 10 messages
            message_text, media_type, timestamp, partner_id = msg
            
            import datetime
            dt = datetime.datetime.fromtimestamp(timestamp)
            time_str = dt.strftime("%d.%m.%Y %H:%M")
            
            messages_text += f"{i}. [{time_str}] "
            if message_text:
                messages_text += f"–¢–µ–∫—Å—Ç: {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n"
            elif media_type:
                messages_text += f"–ú–µ–¥—ñ–∞: {media_type}\n"
            else:
                messages_text += "–ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        
        if len(messages) > 10:
            messages_text += f"\n... —Ç–∞ —â–µ {len(messages) - 10} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        
        await message.answer(messages_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–µ—Å—ñ–¥: {e}")

@dp.message(Command("list_report"))
async def list_report_command(message: types.Message):
    """Handle /list_report command"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    # Get users with 10+ complaints
    from complaints_system import get_users_with_complaints
    
    try:
        users = get_users_with_complaints(min_complaints=10)
        
        if not users:
            await message.answer(
                "üìä **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑—ñ —Å–∫–∞—Ä–≥–∞–º–∏**\n\n"
                "‚úÖ –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ 10+ —Å–∫–∞—Ä–≥–∞–º–∏"
            )
            return
        
        # Create inline keyboard with user buttons
        keyboard_buttons = []
        
        for user_id, complaint_count in users[:20]:  # Show max 20 users
            from complaints_system import get_user_info_for_complaint
            user_info = get_user_info_for_complaint(user_id)
            user_name = user_info['first_name'] if user_info else f"ID:{user_id}"
            
            button_text = f"{user_name} ({complaint_count} —Å–∫–∞—Ä–≥)"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=button_text, 
                    callback_data=f"show_user_{user_id}"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        report_text = f"üìä **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑—ñ —Å–∫–∞—Ä–≥–∞–º–∏**\n\n"
        report_text += f"üë• –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n"
        report_text += f"üìã –ü–æ–∫–∞–∑–∞–Ω–æ: {min(len(users), 20)}\n\n"
        report_text += "üëÜ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ –±–µ—Å—ñ–¥–∏:"
        
        await message.answer(report_text, reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É: {e}")

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    """Handle callback queries"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    
    if callback.data.startswith("show_user_"):
        user_id = int(callback.data.replace("show_user_", ""))
        await show_user_details(callback, user_id)

async def show_user_details(callback: types.CallbackQuery, user_id: int):
    """Show detailed user information and messages"""
    try:
        from complaints_system import (
            get_user_info_for_complaint, 
            get_complaint_count,
            get_critical_period_messages,
            is_user_blocked
        )
        
        user_info = get_user_info_for_complaint(user_id)
        complaint_count = get_complaint_count(user_id)
        messages = get_critical_period_messages(user_id)
        is_blocked = is_user_blocked(user_id)
        
        user_name = user_info['first_name'] if user_info else '–ù–µ–≤—ñ–¥–æ–º–æ'
        
        # Format user details
        details_text = f"üë§ **–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
        details_text += f"‚Ä¢ –Ü–º'—è: {user_name}\n"
        details_text += f"‚Ä¢ ID: `{user_id}`\n"
        details_text += f"‚Ä¢ Username: @{user_info['username'] if user_info else '–Ω–µ–º–∞—î'}\n"
        details_text += f"‚Ä¢ –í—ñ–∫: {user_info['age'] if user_info else '–Ω–µ–≤—ñ–¥–æ–º–æ'}\n"
        details_text += f"‚Ä¢ –°—Ç–∞—Ç—å: {user_info['gender'] if user_info else '–Ω–µ–≤—ñ–¥–æ–º–æ'}\n"
        details_text += f"‚Ä¢ –ö—Ä–∞—ó–Ω–∞: {user_info['country'] if user_info else '–Ω–µ–≤—ñ–¥–æ–º–æ'}\n"
        details_text += f"‚Ä¢ –°–∫–∞—Ä–≥: {complaint_count}\n"
        details_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π' if is_blocked else '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π'}\n\n"
        
        if messages:
            details_text += f"üìù **–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ({len(messages)}):**\n"
            for i, msg in enumerate(messages[:5], 1):
                message_text, media_type, timestamp, partner_id = msg
                
                import datetime
                dt = datetime.datetime.fromtimestamp(timestamp)
                time_str = dt.strftime("%d.%m %H:%M")
                
                details_text += f"{i}. [{time_str}] "
                if message_text:
                    details_text += f"{message_text[:50]}{'...' if len(message_text) > 50 else ''}\n"
                elif media_type:
                    details_text += f"–ú–µ–¥—ñ–∞: {media_type}\n"
                else:
                    details_text += "–ü–æ—Ä–æ–∂–Ω—î\n"
        else:
            details_text += "üìù –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
        
        # Create action buttons
        action_buttons = []
        if is_blocked:
            action_buttons.append([
                InlineKeyboardButton(text="‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"unban_{user_id}")
            ])
        else:
            action_buttons.append([
                InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"ban_{user_id}")
            ])
        
        action_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=action_buttons)
        
        await callback.message.edit_text(details_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)

async def resolve_user_id(target: str) -> int:
    """Resolve user ID from username or ID string"""
    try:
        # If it's a number, return as int
        if target.isdigit():
            return int(target)
        
        # If it starts with @, remove it and search by username
        if target.startswith('@'):
            username = target[1:]
            from registration_aiogram import get_conn
            
            conn = get_conn()
            cur = conn.cursor()
            cur.execute('SELECT user_id FROM users WHERE username = ?', (username,))
            row = cur.fetchone()
            conn.close()
            
            return row[0] if row else None
        
        return None
    except:
        return None

async def main():
    """Main function to run the bot"""
    logger.info("Starting admin complaints bot v2.0...")
    
    try:
        # Start polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error running bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())

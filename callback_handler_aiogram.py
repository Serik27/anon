from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# Import modules
from registration_aiogram import get_user
from user_profile_aiogram import (
    add_rating, get_rating_text, update_user_gender, 
    update_user_age, update_user_country,
    format_combined_profile, get_edit_gender_keyboard,
    get_edit_age_keyboard, get_edit_country_keyboard,
    get_media_blur_keyboard, update_media_blur,
    get_media_blur_status, reset_user_ratings
)
from premium_aiogram import is_premium, show_referral_menu, start_premium_purchase, get_premium_keyboard, activate_referral_reward
from chat_aiogram import get_partner, remove_active, add_waiting, search_by_user_id

# Global variables for state management
edit_profile_state = {}
user_interests = {}
user_section = {}
search_preferences = {}

async def handle_rating_callback(callback: types.CallbackQuery):
    """Handle rating callbacks"""
    _, rating_type, rated_user_id = callback.data.split('_')
    rated_user_id = int(rated_user_id)
    
    add_rating(rated_user_id, rating_type)
    await callback.answer(f"–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞! –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫.")
    
    # Update message to remove rating buttons
    current_text = callback.message.text
    
    keyboard = [
        [InlineKeyboardButton(text="üö´ –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è", callback_data=f"report_{rated_user_id}")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data=f"return_{rated_user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"{current_text}\n\n‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!",
        reply_markup=reply_markup
    )

async def handle_next_callback(callback: types.CallbackQuery):
    """Handle next partner callback"""
    user_id = callback.from_user.id
    await callback.answer("–®—É–∫–∞—î–º–æ –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞...")
    
    # Check if user is in chat first
    partner_id = get_partner(user_id)
    if partner_id:
        # End current chat
        from chat_aiogram import stop_chat_between_users
        await stop_chat_between_users(user_id, partner_id, callback.message)
    
    # Add user to waiting queue
    add_waiting(user_id)
    
    # Send searching message
    await callback.message.answer("–®—É–∫–∞—î–º–æ –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞...")
    
    # Try to find a partner
    await search_by_user_id(user_id, callback.message)



async def handle_premium_callback(callback: types.CallbackQuery):
    """Handle premium-related callbacks"""
    user_id = callback.from_user.id
    
    if callback.data == "get_premium":
        await callback.answer()
        from premium_aiogram import premium_menu
        await premium_menu(callback.message)
        
    elif callback.data == "free_premium":
        await callback.answer()
        await show_referral_menu(callback)
        
    elif callback.data == "activate_referral_reward":
        await activate_referral_reward(callback)
        
    elif callback.data.startswith("buy_"):
        await start_premium_purchase(callback)
        
    elif callback.data == "premium_menu":
        await callback.answer()
        from premium_aiogram import PREMIUM_BENEFITS_TEXT
        await callback.message.edit_text(
            PREMIUM_BENEFITS_TEXT + "\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫—É:",
            reply_markup=get_premium_keyboard()
        )

async def handle_profile_callback(callback: types.CallbackQuery, state: FSMContext = None):
    """Handle profile-related callbacks"""
    user_id = callback.from_user.id
    
    if callback.data == "profile_view":
        profile_text = format_combined_profile(user_id, is_premium)
        from user_profile_aiogram import get_profile_edit_inline_keyboard
        await callback.message.edit_text(profile_text, reply_markup=get_profile_edit_inline_keyboard())
        user_section[user_id] = "profile_edit"
        
    elif callback.data == "profile_back":
        await callback.message.delete()
        await callback.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:")
        if user_id in user_section:
            del user_section[user_id]
            
    # New profile edit handlers
    elif callback.data == "edit_gender":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=get_edit_gender_keyboard()
        )
        
    elif callback.data == "edit_age":
        from bot_aiogram import ProfileEditStates
        
        if state:
            await state.set_state(ProfileEditStates.waiting_for_age_input)
        
        await callback.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (–≤—ñ–¥ 8 –¥–æ 99 —Ä–æ–∫—ñ–≤):"
        )
        
    elif callback.data == "edit_country":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:",
            reply_markup=get_edit_country_keyboard()
        )
        
    elif callback.data == "toggle_media_blur":
        blur_status = get_media_blur_status(user_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω" if blur_status else "–≤–∏–∫–ª—é—á–µ–Ω"
        
        info_text = (
            "üôà **–°–∫—Ä–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ**\n\n"
            "üì∑ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Å–∫—Ä–∏—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ, —è–∫—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≤—ñ–¥ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤.\n\n"
            "‚úÖ **–í–∫–ª—é—á–µ–Ω–æ**: –≤—Å—ñ –º–µ–¥—ñ–∞ –±—É–¥—É—Ç—å –∑–∞–±–ª—é—Ä–æ–≤–∞–Ω—ñ\n"
            "‚ùå **–í–∏–º–∫–Ω–µ–Ω–æ**: –º–µ–¥—ñ–∞ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –±–µ–∑ –±–ª—é—Ä—É\n\n"
            f"üîÑ **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å**: {status_text}"
        )
        
        await callback.message.edit_text(
            info_text,
            reply_markup=get_media_blur_keyboard(blur_status)
        )
        
    elif callback.data == "reset_ratings_stars":
        # Create Telegram Stars payment
        from aiogram.types import LabeledPrice
        await callback.message.answer_invoice(
            title="–û–±–Ω—É–ª–∏—Ç—å –æ—Ü–µ–Ω–∫–∏",
            description="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –¥–æ –Ω—É–ª—è",
            payload="reset_ratings",
            provider_token="",  # Empty for Telegram Stars
            currency="XTR",  # Telegram Stars currency
            prices=[LabeledPrice(label="–û–±–Ω—É–ª–∏—Ç—å –æ—Ü–µ–Ω–∫–∏", amount=55)],
            start_parameter="reset_ratings"
        )
        
    elif callback.data == "invite_friend":
        await show_referral_menu(callback)
        
    elif callback.data == "back_to_profile":
        profile_text = format_combined_profile(user_id, is_premium)
        from user_profile_aiogram import get_profile_edit_inline_keyboard
        await callback.message.edit_text(profile_text, reply_markup=get_profile_edit_inline_keyboard())

async def handle_search_settings_callback(callback: types.CallbackQuery):
    """Handle search settings callbacks"""
    user_id = callback.from_user.id
    
    # Check premium requirements for search settings
    if callback.data.startswith(("search_setting_gender", "search_setting_age")):
        if not is_premium(user_id):
            await callback.answer("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
            from premium_aiogram import get_premium_keyboard
            await callback.message.answer(
                "‚ö†Ô∏è –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!\n\n"
                "–û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–µ–º—ñ—É–º, —â–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –∑–∞ —Å—Ç–∞—Ç—Ç—é —Ç–∞ –≤—ñ–∫–æ–º.",
                reply_markup=get_premium_keyboard()
            )
            return
    
    if callback.data == "search_setting_gender":
        from user_profile_aiogram import get_gender_search_keyboard
        await callback.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=get_gender_search_keyboard()
        )
        
    elif callback.data == "search_setting_age":
        from user_profile_aiogram import get_age_search_keyboard
        await callback.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–æ–≤—É –≥—Ä—É–ø—É –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=get_age_search_keyboard()
        )
        

async def handle_report_callback(callback: types.CallbackQuery):
    """Handle report callbacks"""
    _, reported_user_id = callback.data.split('_')
    reported_user_id = int(reported_user_id)
    reporter_id = callback.from_user.id
    
    # Check if user already complained about this user recently
    from complaints_system import add_complaint, has_user_complained_recently
    
    if has_user_complained_recently(reporter_id, reported_user_id):
        await callback.answer("–í–∏ –≤–∂–µ –ø–æ—Å–∫–∞—Ä–∂–∏–ª–∏—Å—è –Ω–∞ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ü—ñ–π —Å–µ—Å—ñ—ó.", show_alert=True)
        return
    
    complaint_count = add_complaint(reporter_id, reported_user_id)
    
    await callback.answer("–°–∫–∞—Ä–≥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É –≤ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—ñ —Å–µ—Ä–≤—ñ—Å—É!")
    
    # Keep rating buttons but remove complaint button
    current_text = callback.message.text
    
    # Recreate rating buttons without complaint button
    keyboard = [
        [
            InlineKeyboardButton(text="üëç –î–æ–±—Ä–µ", callback_data=f"rate_good_{reported_user_id}"),
            InlineKeyboardButton(text="üëé –ü–æ–≥–∞–Ω–æ", callback_data=f"rate_bad_{reported_user_id}"),
            InlineKeyboardButton(text="‚ù§Ô∏è –°—É–ø–µ—Ä", callback_data=f"rate_super_{reported_user_id}")
        ],
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data=f"return_{reported_user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"{current_text}\n\nüìã –°–∫–∞—Ä–≥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.",
        reply_markup=reply_markup
    )
    
    # Note: Admin bot now works independently through admin_complaints_bot.py
    # No automatic notifications needed - admin uses /list_report command

async def handle_room_callback(callback: types.CallbackQuery):
    """Handle room selection callbacks"""
    user_id = callback.from_user.id
    
    room_map = {
        "room_general": "üí¨ –û–±—â–µ–Ω–∏–µ",
        "room_exchange": "üîû –û–±–º–µ–Ω 18+", 
        "room_lgbt": "üè≥Ô∏è‚Äçüåà –õ–ì–ë–¢",
        "room_school": "üéì –®–∫–æ–ª–∞"
    }
    
    room_name = room_map.get(callback.data)
    if room_name:
        # Check if user is currently in chat or searching
        from chat_aiogram import get_partner, is_waiting
        partner_id = get_partner(user_id)
        if partner_id or is_waiting(user_id):
            await callback.answer(
                "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É –∞–±–æ –ø–æ—à—É–∫—É —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞. –ó–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É –∞–±–æ –ø–æ—à—É–∫ —Å–ø–æ—á–∞—Ç–∫—É.",
                show_alert=True
            )
            return
        
        # Check if room is open
        from rooms_system import is_room_open, set_user_room, get_room_info
        
        if not is_room_open(callback.data):
            await callback.answer(
                f"‚ùå –ö—ñ–º–Ω–∞—Ç–∞ '{room_name}' —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–∫—Ä–∏—Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.",
                show_alert=True
            )
            return
        
        # Check access to "–®–∫–æ–ª–∞" room
        if callback.data == "room_school":
            from registration_aiogram import get_user
            from premium_aiogram import is_premium, is_pro
            
            user_data = get_user(user_id)
            if user_data:
                user_age = user_data.get('age', 0)
                
                # Check if user is 18+ and doesn't have premium/pro status
                if user_age >= 18 and not (is_premium(user_id) or is_pro(user_id)):
                    await callback.answer(
                        "‚ùå –î–æ—Å—Ç—É–ø –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ '–®–∫–æ–ª–∞' –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ 18+ —Ä–æ–∫—ñ–≤.\n\n"
                        "–û—Ç—Ä–∏–º–∞–π—Ç–µ Premium –∞–±–æ PRO —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—Å—ñ—Ö –∫—ñ–º–Ω–∞—Ç!",
                        show_alert=True
                    )
                    return
        
        # Save user's room preference to database
        set_user_room(user_id, callback.data)
        
        # Show confirmation
        await callback.answer(f"–û–±—Ä–∞–Ω–æ –∫—ñ–º–Ω–∞—Ç—É: {room_name}")
        
        if callback.data == "room_school":
            await callback.message.edit_text(
                f'‚úÖ –í–∏ –≤–∏–±—Ä–∞–ª–∏ –∫—ñ–º–Ω–∞—Ç—É "–®–∫–æ–ª–∞". –¶—è –∫—ñ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é, –∑–∞–±–µ–∑–ø–µ—á—É—é—á–∏ –±–µ–∑–ø–µ–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫–∏–º –Ω–µ–º–∞—î 18 —Ä–æ–∫—ñ–≤.\n\n'
                f"–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ —à—É–∫–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤ —É —Ü—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ."
            )
        else:
            await callback.message.edit_text(
                f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫—ñ–º–Ω–∞—Ç—É: *{room_name}*\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ —à—É–∫–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤ —É —Ü—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ."
            )

async def handle_premium_search_callback(callback: types.CallbackQuery, state: FSMContext = None):
    """Handle premium search callbacks"""
    user_id = callback.from_user.id
    
    if callback.data == "premium_search_gender":
        from user_profile_aiogram import get_premium_gender_keyboard
        await callback.message.edit_text(
            "üë§ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:**",
            reply_markup=get_premium_gender_keyboard()
        )
        
    elif callback.data == "premium_search_age":
        from user_profile_aiogram import get_premium_age_keyboard
        await callback.message.edit_text(
            "üî¢ **–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:**",
            reply_markup=get_premium_age_keyboard()
        )
        
    elif callback.data == "premium_search_country":
        from user_profile_aiogram import get_premium_country_keyboard
        await callback.message.edit_text(
            "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:**\n\n"
            "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω. –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ",
            reply_markup=get_premium_country_keyboard(user_id)
        )
        
    elif callback.data == "premium_show_status":
        from user_profile_aiogram import get_premium_show_status_keyboard
        await callback.message.edit_text(
            "üíé **–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å Premium —Å—Ç–∞—Ç—É—Å:**\n\n"
            "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —á—Ç–æ –≤—ã Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
            reply_markup=get_premium_show_status_keyboard(user_id)
        )
        
    elif callback.data == "premium_user_type":
        from user_profile_aiogram import get_premium_user_type_keyboard
        await callback.message.edit_text(
            "üîç **–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞:**",
            reply_markup=get_premium_user_type_keyboard()
        )
        
    elif callback.data == "premium_search_back":
        from user_profile_aiogram import get_search_settings_keyboard, get_search_preferences_text
        await callback.message.edit_text(
            get_search_preferences_text(user_id),
            reply_markup=get_search_settings_keyboard(user_id)
        )
        
    elif callback.data == "premium_start_search":
        await callback.answer("–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–µ–º—ñ—É–º –ø–æ—à—É–∫...")
        user_id = callback.from_user.id
        
        # Check if already in chat or searching
        from chat_aiogram import get_partner, is_waiting, start_premium_search
        if get_partner(user_id):
            await callback.message.edit_text("–í–∏ –≤–∂–µ —É —á–∞—Ç—ñ! –ó–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.")
            return
        if is_waiting(user_id):
            await callback.message.edit_text("–í–∏ –≤–∂–µ —à—É–∫–∞—î—Ç–µ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!")
            return
            
        # Start premium search
        await start_premium_search(callback.message)
        
    # Handle specific selections
    elif callback.data.startswith("premium_gender_"):
        gender = callback.data.replace("premium_gender_", "")
        gender_text = {"any": "–õ—é–±–æ–π", "male": "–ü–∞—Ä–Ω–∏", "female": "–î–µ–≤—É—à–∫–∏"}.get(gender, "–õ—é–±–æ–π")
        
        # Save preference
        from user_profile_aiogram import set_search_preference, get_search_settings_keyboard
        set_search_preference(user_id, 'gender', gender)
        
        await callback.answer(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª: {gender_text}")
        
        # Return to premium search menu
        from user_profile_aiogram import get_search_preferences_text
        await callback.message.edit_text(
            get_search_preferences_text(user_id),
            reply_markup=get_search_settings_keyboard(user_id)
        )
        
    elif callback.data.startswith("premium_age_"):
        age = callback.data.replace("premium_age_", "")
        age_text = {"any": "–õ—é–±–æ–π", "7_17": "7-17", "18_25": "18-25", "26_35": "26-35", "36_50": "36-50", "50_plus": "50+"}.get(age, "–õ—é–±–æ–π")
        
        # Save preference
        from user_profile_aiogram import set_search_preference, get_search_settings_keyboard, get_search_preferences_text
        set_search_preference(user_id, 'age_range', age)
        
        await callback.answer(f"–í—ã–±—Ä–∞–Ω –≤–æ–∑—Ä–∞—Å—Ç: {age_text}")
        
        # Return to premium search menu
        await callback.message.edit_text(
            get_search_preferences_text(user_id),
            reply_markup=get_search_settings_keyboard(user_id)
        )
        
    elif callback.data.startswith("premium_country_"):
        country = callback.data.replace("premium_country_", "")
        country_text = {
            "all": "–í—Å–µ —Å—Ç—Ä–∞–Ω—ã",
            "ukraine": "–£–∫—Ä–∞–∏–Ω–∞",
            "russia": "–†–æ—Å—Å–∏—è",
            "belarus": "–ë–µ–ª–∞—Ä—É—Å—å",
            "kazakhstan": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
            "georgia": "–ì—Ä—É–∑–∏—è",
            "europe": "–ï–≤—Ä–æ–ø–∞",
            "azerbaijan": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
            "uzbekistan": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
            "usa": "–°–®–ê",
            "thailand": "–¢–∞–∏–ª–∞–Ω–¥",
            "english": "English",
            "other": "–û—Å—Ç–∞–ª—å–Ω—ã–µ"
        }.get(country, "–í—Å–µ —Å—Ç—Ä–∞–Ω—ã")
        
        # Handle multiple country selection
        from user_profile_aiogram import get_search_preference, set_search_preference, get_premium_country_keyboard
        
        if country == "all":
            # If "all" selected, clear other selections
            set_search_preference(user_id, 'countries', 'all')
            await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ: {country_text}")
        else:
            # Toggle country selection
            selected_countries = get_search_preference(user_id, 'countries')
            selected_list = selected_countries.split(',') if selected_countries and selected_countries != 'all' else []
            
            if country in selected_list:
                # Remove country
                selected_list.remove(country)
                await callback.answer(f"–£–±—Ä–∞–Ω–æ: {country_text}")
            else:
                # Add country
                selected_list.append(country)
                await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {country_text}")
            
            # Save updated list
            new_selection = ','.join(selected_list) if selected_list else ''
            set_search_preference(user_id, 'countries', new_selection)
        
        # Update keyboard with new selections
        await callback.message.edit_text(
            "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:**\n\n"
            "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω. –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ",
            reply_markup=get_premium_country_keyboard(user_id)
        )
        
    elif callback.data.startswith("premium_type_"):
        user_type = callback.data.replace("premium_type_", "")
        type_text = {"all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "premium": "–¢–æ–ª—å–∫–æ Premium", "regular": "–¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ"}.get(user_type, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        # Save preference
        from user_profile_aiogram import set_search_preference, get_search_settings_keyboard
        set_search_preference(user_id, 'user_type', user_type)
        
        await callback.answer(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {type_text}")
        
        # Return to premium search menu
        from user_profile_aiogram import get_search_preferences_text
        await callback.message.edit_text(
            get_search_preferences_text(user_id),
            reply_markup=get_search_settings_keyboard(user_id)
        )
        
    elif callback.data == "premium_toggle_show_status":
        # Toggle show premium status
        from user_profile_aiogram import get_search_preference, set_search_preference, get_premium_show_status_keyboard
        
        current_status = get_search_preference(user_id, 'show_premium_status')
        new_status = 'false' if current_status != 'false' else 'true'
        set_search_preference(user_id, 'show_premium_status', new_status)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status == 'true' else "–≤—ã–∫–ª—é—á–µ–Ω"
        await callback.answer(f"–ü–æ–∫–∞–∑ Premium —Å—Ç–∞—Ç—É—Å–∞ {status_text}")
        
        # Update keyboard
        await callback.message.edit_text(
            "üíé **–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å Premium —Å—Ç–∞—Ç—É—Å:**\n\n"
            "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —á—Ç–æ –≤—ã Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
            reply_markup=get_premium_show_status_keyboard(user_id)
        )

async def handle_registration_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle registration callbacks"""
    from bot_aiogram import RegistrationStates
    
    if callback.data == "reg_gender_male":
        await state.update_data(gender="üë® –ß–æ–ª–æ–≤—ñ–∫")
        await callback.answer("–û–±—Ä–∞–Ω–æ: –ß–æ–ª–æ–≤—ñ–∫")
        await callback.message.edit_text("2. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (–≤—ñ–¥ 7 –¥–æ 99 —Ä–æ–∫—ñ–≤):")
        await state.set_state(RegistrationStates.waiting_for_age)
        
    elif callback.data == "reg_gender_female":
        await state.update_data(gender="üë© –ñ—ñ–Ω–∫–∞")
        await callback.answer("–û–±—Ä–∞–Ω–æ: –ñ—ñ–Ω–∫–∞")
        await callback.message.edit_text("2. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (–≤—ñ–¥ 7 –¥–æ 99 —Ä–æ–∫—ñ–≤):")
        await state.set_state(RegistrationStates.waiting_for_age)

async def handle_country_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle country selection during registration"""
    from registration_aiogram import save_user
    import time
    
    country_map = {
        "country_ukraine": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞",
        "country_russia": "üá∑üá∫ –†–æ—Å—ñ—è", 
        "country_belarus": "üáßüáæ –ë—ñ–ª–æ—Ä—É—Å—å",
        "country_kazakhstan": "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "country_georgia": "üá¨üá™ –ì—Ä—É–∑—ñ—è",
        "country_europe": "üá™üá∫ –Ñ–≤—Ä–æ–ø–∞",
        "country_azerbaijan": "üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
        "country_uzbekistan": "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
        "country_usa": "üá∫üá∏ –°–®–ê",
        "country_thailand": "üáπüá≠ –¢–∞–π–ª–∞–Ω–¥",
        "country_english": "üá¨üáß English",
        "country_other": "üåé –†–µ—à—Ç–∞ —Å–≤—ñ—Ç—É"
    }
    
    country = country_map.get(callback.data)
    if not country:
        await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫—Ä–∞—ó–Ω–∞")
        return
        
    await state.update_data(country=country)
    await callback.answer(f"–û–±—Ä–∞–Ω–æ: {country}")
    
    # Registration completed - save user
    data = await state.get_data()
    user_id = callback.from_user.id
    
    save_user(
        user_id=user_id,
        gender=data['gender'],
        age=data['age'],
        country=country,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name
    )
    
    await callback.message.edit_text("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")
    
    # Get main keyboard
    from bot_aiogram import get_main_keyboard
    await callback.message.answer(
        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!",
        reply_markup=get_main_keyboard()
    )
    
    # Process referral if exists
    if 'referrer_id' in data:
        referrer_id = data['referrer_id']
        from bot_aiogram import process_referral
        await process_referral(referrer_id, user_id)
    
    await state.clear()

async def handle_profile_edit_actions(callback: types.CallbackQuery):
    """Handle profile edit action callbacks"""
    user_id = callback.from_user.id
    
    # Gender setting
    if callback.data == "set_gender_male":
        update_user_gender(user_id, "üë® –ß–æ–ª–æ–≤—ñ–∫")
        await callback.answer("–ü–æ–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –º—É–∂—Å–∫–æ–π")
        profile_text = format_combined_profile(user_id, is_premium)
        from user_profile_aiogram import get_profile_edit_inline_keyboard
        await callback.message.edit_text(profile_text, reply_markup=get_profile_edit_inline_keyboard())
        
    elif callback.data == "set_gender_female":
        update_user_gender(user_id, "üë© –ñ—ñ–Ω–∫–∞")
        await callback.answer("–ü–æ–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∂–µ–Ω—Å–∫–∏–π")
        profile_text = format_combined_profile(user_id, is_premium)
        from user_profile_aiogram import get_profile_edit_inline_keyboard
        await callback.message.edit_text(profile_text, reply_markup=get_profile_edit_inline_keyboard())
        
    # Age setting is now handled by text input, not buttons
        
    # Country setting
    elif callback.data.startswith("set_country_"):
        country_map = {
            "set_country_ukraine": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞",
            "set_country_russia": "üá∑üá∫ –†–æ—Å—ñ—è",
            "set_country_belarus": "üáßüáæ –ë—ñ–ª–æ—Ä—É—Å—å",
            "set_country_kazakhstan": "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
            "set_country_georgia": "üá¨üá™ –ì—Ä—É–∑—ñ—è",
            "set_country_europe": "üá™üá∫ –Ñ–≤—Ä–æ–ø–∞",
            "set_country_azerbaijan": "üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
            "set_country_uzbekistan": "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
            "set_country_usa": "üá∫üá∏ –°–®–ê",
            "set_country_thailand": "üáπüá≠ –¢–∞–π–ª–∞–Ω–¥",
            "set_country_english": "üá¨üáß English",
            "set_country_other": "üåé –†–µ—à—Ç–∞ —Å–≤—ñ—Ç—É"
        }
        
        country = country_map.get(callback.data)
        if country:
            update_user_country(user_id, country)
            await callback.answer(f"–°—Ç—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {country}")
            profile_text = format_combined_profile(user_id, is_premium)
            from user_profile_aiogram import get_profile_edit_inline_keyboard
            await callback.message.edit_text(profile_text, reply_markup=get_profile_edit_inline_keyboard())
            
    # Media blur toggle setting
    elif callback.data == "toggle_blur_on":
        update_media_blur(user_id, True)
        await callback.answer("‚úÖ –ë–ª—é—Ä —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤–∫–ª—é—á–µ–Ω–æ")
        
        # Update the blur settings page with new status
        blur_status = True
        info_text = (
            "üôà **–°–∫—Ä–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ**\n\n"
            "üì∑ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Å–∫—Ä–∏—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ, —è–∫—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≤—ñ–¥ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤.\n\n"
            "‚úÖ **–í–∫–ª—é—á–µ–Ω–æ**: –≤—Å—ñ –º–µ–¥—ñ–∞ –±—É–¥—É—Ç—å –∑–∞–±–ª—é—Ä–æ–≤–∞–Ω—ñ\n"
            "‚ùå **–í–∏–º–∫–Ω–µ–Ω–æ**: –º–µ–¥—ñ–∞ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –±–µ–∑ –±–ª—é—Ä—É\n\n"
            f"üîÑ **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å**: –≤–∫–ª—é—á–µ–Ω–æ"
        )
        await callback.message.edit_text(info_text, reply_markup=get_media_blur_keyboard(blur_status))
        
    elif callback.data == "toggle_blur_off":
        update_media_blur(user_id, False)
        await callback.answer("‚ùå –ë–ª—é—Ä —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤–∏–º–∫–Ω–µ–Ω–æ")
        
        # Update the blur settings page with new status
        blur_status = False
        info_text = (
            "üôà **–°–∫—Ä–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ**\n\n"
            "üì∑ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Å–∫—Ä–∏—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ, —è–∫—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≤—ñ–¥ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤.\n\n"
            "‚úÖ **–í–∫–ª—é—á–µ–Ω–æ**: –≤—Å—ñ –º–µ–¥—ñ–∞ –±—É–¥—É—Ç—å –∑–∞–±–ª—é—Ä–æ–≤–∞–Ω—ñ\n"
            "‚ùå **–í–∏–º–∫–Ω–µ–Ω–æ**: –º–µ–¥—ñ–∞ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –±–µ–∑ –±–ª—é—Ä—É\n\n"
            f"üîÑ **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å**: –≤–∏–º–∫–Ω–µ–Ω–æ"
        )
        await callback.message.edit_text(info_text, reply_markup=get_media_blur_keyboard(blur_status))

# Main callback handler
async def handle_callback_query(callback: types.CallbackQuery, state: FSMContext):
    """Main callback query handler"""
    try:
        # Rating callbacks
        if callback.data.startswith("rate_"):
            await handle_rating_callback(callback)
            
        # Next partner callback
        elif callback.data == "next":
            await handle_next_callback(callback)
            
            
        # Premium callbacks
        elif callback.data in ["get_premium", "free_premium", "premium_menu", "activate_referral_reward"] or callback.data.startswith("buy_"):
            await handle_premium_callback(callback)
            
        # PRO callbacks
        elif callback.data in ["show_pro_purchase", "back_to_premium", "buy_pro_month"]:
            await handle_pro_callbacks(callback)
            
        # Profile callbacks
        elif callback.data.startswith("profile_") or callback.data in ["edit_gender", "edit_age", "edit_country", "toggle_media_blur", "reset_ratings_stars", "invite_friend", "back_to_profile"]:
            await handle_profile_callback(callback, state)
            
        # Profile edit action callbacks
        elif callback.data.startswith(("set_gender_", "set_age_", "set_country_", "toggle_blur_")):
            await handle_profile_edit_actions(callback)
            
        # Search settings callbacks
        elif callback.data.startswith("search_"):
            await handle_search_settings_callback(callback)
            
        # Report callbacks
        elif callback.data.startswith("report_"):
            await handle_report_callback(callback)
            
        # Room callbacks
        elif callback.data.startswith("room_"):
            await handle_room_callback(callback)
            
        # Registration callbacks
        elif callback.data.startswith("reg_"):
            await handle_registration_callback(callback, state)
            
        # Country selection during registration
        elif callback.data.startswith("country_"):
            await handle_country_callback(callback, state)
            
        # Premium search callbacks
        elif callback.data.startswith("premium_"):
            await handle_premium_search_callback(callback, state)
            
        # Return to partner callback
        elif callback.data.startswith("return_to_"):
            await handle_return_to_partner(callback)
            
        # Return button callback (after rating)
        elif callback.data.startswith("return_"):
            await handle_return_callback(callback)
            
        # Return request response callbacks
        elif callback.data.startswith("return_accept_") or callback.data.startswith("return_decline_"):
            await handle_return_response(callback)
            
        # Friends system callbacks
        elif callback.data.startswith("add_friend_"):
            await handle_add_friend_callback(callback, state)
        elif callback.data.startswith("friend_info_"):
            await handle_friend_info_callback(callback)
        elif callback.data.startswith("friend_delete_"):
            await handle_friend_delete_callback(callback)
        elif callback.data.startswith("confirm_delete_"):
            await handle_confirm_delete_callback(callback)
        elif callback.data.startswith("friends_page_"):
            await handle_friends_page_callback(callback)
        elif callback.data == "friends_list":
            await handle_friends_list_callback(callback)
        elif callback.data == "friends_back":
            await handle_friends_back_callback(callback)
        elif callback.data.startswith("friend_request_"):
            await handle_friend_request_callback(callback)
        elif callback.data.startswith("friend_account_"):
            await handle_friend_account_callback(callback)
        elif callback.data.startswith("friend_activity_"):
            await handle_friend_activity_callback(callback)
        elif callback.data == "check_subscriptions":
            await handle_check_subscriptions_callback(callback)
            
        # PRO menu callbacks
        elif callback.data.startswith("pro_") or callback.data == "back_to_pro_menu":
            await handle_pro_menu_callback(callback)
            
        # Unblock payment callbacks
        elif callback.data.startswith("unblock_pay_"):
            await handle_unblock_payment_callback(callback)
            
        else:
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        print(f"Error in callback handler: {e}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_return_callback(callback: types.CallbackQuery):
    """Handle return button after rating"""
    user_id = callback.from_user.id
    
    # Return to main menu
    from bot_aiogram import get_main_keyboard
    keyboard = get_main_keyboard(user_id)
    
    await callback.message.edit_text(
        "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=keyboard
    )

async def handle_return_to_partner(callback: types.CallbackQuery):
    """Handle return to partner request"""
    user_id = callback.from_user.id
    partner_id = int(callback.data.replace("return_to_", ""))
    
    # Check if user has premium or pro
    from premium_aiogram import is_premium, is_pro
    if not (is_premium(user_id) or is_pro(user_id)):
        await callback.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–º—ñ—É–º/PRO –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!", show_alert=True)
        return
    
    # Check if partner is currently searching
    from chat_aiogram import is_waiting
    if is_waiting(partner_id):
        # Partner is searching - they will be connected automatically when search completes
        # Create return request in database
        from friends_system import create_return_request
        success, message = create_return_request(user_id, partner_id)
        
        if success:
            await callback.message.edit_text("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, —á–µ–∫–∞—î–º–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞...")
            await callback.answer("–ó–∞–ø–∏—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, –æ—á—ñ–∫—É–π—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è")
        else:
            await callback.answer(f"‚ùå {message}", show_alert=True)
    else:
        # Partner is not searching - create return request and wait
        from friends_system import create_return_request
        success, message = create_return_request(user_id, partner_id)
        
        if success:
            await callback.message.edit_text("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, —á–µ–∫–∞—î–º–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞...\n\n–ö–æ–ª–∏ –≤–∞—à —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –ø–æ—á–Ω–µ –ø–æ—à—É–∫, –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑'—î–¥–Ω–∞—î—Ç–µ—Å—å.")
            await callback.answer("–ó–∞–ø–∏—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, –æ—á—ñ–∫—É–π—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è")
        else:
            await callback.answer(f"‚ùå {message}", show_alert=True)

async def handle_return_response(callback: types.CallbackQuery):
    """Handle response to return request"""
    user_id = callback.from_user.id
    
    if callback.data.startswith("return_accept_"):
        requester_id = int(callback.data.replace("return_accept_", ""))
        
        # Check if both users are available for chat
        from chat_aiogram import get_partner, add_active, is_waiting, remove_waiting
        
        # Check if users are not already in other chats
        if get_partner(user_id) or get_partner(requester_id):
            await callback.message.edit_text("‚ùå –û–¥–∏–Ω –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∂–µ —É —á–∞—Ç—ñ –∑ –∫–∏–º–æ—Å—å —ñ–Ω—à–∏–º.")
            await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è")
            return
        
        # Remove from waiting if they were searching
        if is_waiting(user_id):
            remove_waiting(user_id)
        if is_waiting(requester_id):
            remove_waiting(requester_id)
        
        # Connect users
        add_active(user_id, requester_id)
        
        # Notify both users
        await callback.message.edit_text("‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è! –î—ñ–∞–ª–æ–≥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.")
        
        try:
            from bot_aiogram import bot
            await bot.send_message(
                requester_id,
                "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ! –î—ñ–∞–ª–æ–≥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. üíé"
            )
        except Exception as e:
            print(f"Error notifying requester {requester_id}: {e}")
            
        await callback.answer("‚úÖ –î—ñ–∞–ª–æ–≥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ!")
        
    elif callback.data.startswith("return_decline_"):
        requester_id = int(callback.data.replace("return_decline_", ""))
        
        # Notify both users
        await callback.message.edit_text("‚ùå –í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—è –≤—ñ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è.")
        
        try:
            from bot_aiogram import bot
            await bot.send_message(
                requester_id,
                "‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."
            )
        except Exception as e:
            print(f"Error notifying requester {requester_id}: {e}")
            
        await callback.answer("–ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")

async def handle_add_friend_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle add friend callback"""
    user_id = callback.from_user.id
    friend_id = int(callback.data.replace("add_friend_", ""))
    
    # Check PRO status
    from premium_aiogram import is_pro
    if not is_pro(user_id):
        await callback.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ PRO –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!", show_alert=True)
        return
    
    # Get friend info
    from registration_aiogram import get_user
    friend_data = get_user(friend_id)
    if not friend_data:
        await callback.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # Ask for friend name
    await callback.message.edit_text(
        f"üë§ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –¥—Ä—É–∑—ñ**\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {friend_data.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–æ')} "
        f"(@{friend_data.get('username', '–Ω–µ–º–∞—î')})\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –¥–ª—è —Ü—å–æ–≥–æ –¥—Ä—É–≥–∞:"
    )
    
    # Store friend_id in state
    await state.update_data(adding_friend_id=friend_id)
    # Import FriendStates from the main bot file to avoid conflicts
    from bot_aiogram import FriendStates
    await state.set_state(FriendStates.waiting_for_name)
    
    # Log state setting for debugging
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"Set state FriendStates.waiting_for_name for user {user_id}, friend_id: {friend_id}")
    
    await callback.answer()

async def handle_friend_info_callback(callback: types.CallbackQuery):
    """Handle friend info callback"""
    friend_id = int(callback.data.replace("friend_info_", ""))
    from friends_system import show_friend_info
    await show_friend_info(callback, friend_id)

async def handle_friends_page_callback(callback: types.CallbackQuery):
    """Handle friends page navigation"""
    page = int(callback.data.replace("friends_page_", ""))
    from friends_system import show_friends_list
    await show_friends_list(callback, page)

async def handle_friends_list_callback(callback: types.CallbackQuery):
    """Handle back to friends list"""
    from friends_system import show_friends_list
    await show_friends_list(callback)

async def handle_friends_back_callback(callback: types.CallbackQuery):
    """Handle back from friends list to main menu"""
    await callback.message.delete()
    await callback.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    
    # Send main menu
    from bot_aiogram import get_main_keyboard
    await callback.message.answer(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(callback.from_user.id)
    )


async def handle_friend_account_callback(callback: types.CallbackQuery):
    """Handle get friend account callback"""
    friend_id = int(callback.data.replace("friend_account_", ""))
    
    # Create universal link using user_id (works regardless of username changes)
    account_link = f"tg://user?id={friend_id}"
    
    # Send as message without auto-copying
    await callback.message.answer(
        f"üë§ **–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–∫–∞—É–Ω—Ç –¥—Ä—É–≥–∞:**\n\n{account_link}\n\n"
        f"üí° –¶–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫–µ –ø—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏—Ç—å —Å–≤—ñ–π username."
    )
    
    await callback.answer("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")

async def handle_friend_activity_callback(callback: types.CallbackQuery):
    """Handle friend activity notification callback"""
    user_id = callback.from_user.id
    friend_id = int(callback.data.replace("friend_activity_", ""))
    
    # Toggle notification status
    from friends_system import toggle_activity_notification, get_user_activity, show_friend_info
    
    is_enabled = toggle_activity_notification(user_id, friend_id)
    
    if is_enabled:
        await callback.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    else:
        await callback.answer("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏–º–∫–Ω–µ–Ω–æ")
    
    # Refresh friend info to show updated button
    await show_friend_info(callback, friend_id)

async def handle_pro_menu_callback(callback: types.CallbackQuery):
    """Handle PRO menu callbacks"""
    user_id = callback.from_user.id
    
    # Check PRO status
    from premium_aiogram import is_pro
    if not is_pro(user_id):
        await callback.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ PRO –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!", show_alert=True)
        return
    
    if callback.data == "pro_friends":
        # Show friends list
        from friends_system import show_friends_list
        await show_friends_list(callback)
        
        
    elif callback.data == "pro_about":
        # Show PRO status info
        from registration_aiogram import get_conn
        import time
        
        conn = get_conn()
        cur = conn.cursor()
        cur.execute('SELECT pro_until FROM users WHERE user_id = ?', (user_id,))
        row = cur.fetchone()
        pro_until = row[0] if row else 0
        conn.close()
        
        # Calculate remaining time
        current_time = int(time.time())
        remaining_seconds = pro_until - current_time
        
        if remaining_seconds > 0:
            days = remaining_seconds // (24 * 3600)
            hours = (remaining_seconds % (24 * 3600)) // 3600
            minutes = (remaining_seconds % 3600) // 60
            
            if days > 0:
                time_left = f"{days} –¥–Ω. {hours} –≥–æ–¥. {minutes} —Ö–≤."
            elif hours > 0:
                time_left = f"{hours} –≥–æ–¥. {minutes} —Ö–≤."
            else:
                time_left = f"{minutes} —Ö–≤."
        else:
            time_left = "–ù–∞–∑–∞–≤–∂–¥–∏"
        
        from datetime import datetime
        if pro_until > 0 and remaining_seconds > 0:
            end_date = datetime.fromtimestamp(pro_until)
            end_date_text = end_date.strftime('%d.%m.%Y %H:%M')
        else:
            end_date_text = "–ù–∞–∑–∞–≤–∂–¥–∏"
        
        about_text = (
            f"üåü *–ü—Ä–æ –≤–∞—à PRO —Å—Ç–∞—Ç—É—Å*\n\n"
            f"üìÖ *–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è:* {end_date_text}\n"
            f"‚è∞ *–ó–∞–ª–∏—à–∏–ª–æ—Å—å:* {time_left}\n\n"
            f"üéØ *PRO –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:*\n"
            f"‚Ä¢ üë• –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ø—Ä–æ—Ñ—ñ–ª—è–º–∏\n"
            f"‚Ä¢ üìû –®–≤–∏–¥–∫—ñ –∑–∞–ø—Ä–æ—Å–∏ –Ω–∞ —Ä–æ–∑–º–æ–≤—É –∑ –¥—Ä—É–∑—è–º–∏\n"
            f"‚Ä¢ üîî –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥—Ä—É–∑—ñ–≤\n"
            f"‚Ä¢ üë§ –ü—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–∫–∞—É–Ω—Ç–∏ –¥—Ä—É–∑—ñ–≤\n"
            f"‚Ä¢ üîÑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞\n"
            f"‚Ä¢ üíé –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó Premium —Å—Ç–∞—Ç—É—Å—É\n\n"
            f"‚ú® *–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ PRO —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!*"
        )
        
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ PRO –º–µ–Ω—é", callback_data="back_to_pro_menu")]]
        )
        
        await callback.message.edit_text(about_text, reply_markup=back_keyboard)
        await callback.answer()
        
    elif callback.data == "back_to_pro_menu":
        # Return to main PRO menu
        from bot_aiogram import pro_command
        # Recreate the main PRO menu
        await callback.message.delete()
        
        # Create a fake message object to reuse pro_command logic
        class FakeMessage:
            def __init__(self, user_id):
                self.from_user = types.User(id=user_id, is_bot=False, first_name="User")
            
            async def answer(self, text, reply_markup=None):
                await callback.message.answer(text, reply_markup=reply_markup)
        
        fake_message = FakeMessage(user_id)
        await pro_command(fake_message)
        await callback.answer()
        
    else:
        await callback.answer("–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", show_alert=True)

async def handle_friend_request_callback(callback: types.CallbackQuery):
    """Handle friend request callback"""
    friend_id = int(callback.data.replace("friend_request_", ""))
    user_id = callback.from_user.id
    
    from friends_system import send_friend_request
    success, message = send_friend_request(user_id, friend_id)
    
    if success:
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–æ–∑–º–æ–≤—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", show_alert=True)
    else:
        await callback.answer(f"‚ùå {message}", show_alert=True)

async def handle_friend_delete_callback(callback: types.CallbackQuery):
    """Handle friend delete callback"""
    friend_id = int(callback.data.replace("friend_delete_", ""))
    user_id = callback.from_user.id
    
    # Get friend's name for confirmation
    from friends_system import get_friend_name, delete_friend
    friend_name = get_friend_name(user_id, friend_id)
    
    # Create confirmation keyboard
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"confirm_delete_{friend_id}"),
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"friend_info_{friend_id}")
            ]
        ]
    )
    
    await callback.message.edit_text(
        f"üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—Ä—É–≥–∞**\n\n"
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ **{friend_name}** –∑—ñ —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤?\n\n"
        f"‚ö†Ô∏è –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
        reply_markup=confirm_keyboard
    )
    await callback.answer()

async def handle_confirm_delete_callback(callback: types.CallbackQuery):
    """Handle confirm delete friend callback"""
    friend_id = int(callback.data.replace("confirm_delete_", ""))
    user_id = callback.from_user.id
    
    from friends_system import get_friend_name, delete_friend, show_friends_list
    friend_name = get_friend_name(user_id, friend_id)
    
    if delete_friend(user_id, friend_id):
        await callback.message.edit_text(
            f"‚úÖ **–î—Ä—É–≥–∞ –≤–∏–¥–∞–ª–µ–Ω–æ**\n\n"
            f"**{friend_name}** —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤."
        )
        
        # Wait a moment then show friends list
        import asyncio
        await asyncio.sleep(2)
        await show_friends_list(callback)
    else:
        await callback.message.edit_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –¥—Ä—É–≥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
    
    await callback.answer()

async def handle_check_subscriptions_callback(callback: types.CallbackQuery):
    """Handle check subscriptions callback"""
    from complaints_system import check_user_subscriptions
    from bot_aiogram import bot
    
    user_id = callback.from_user.id
    
    # Check if user is subscribed to all required channels
    is_subscribed = await check_user_subscriptions(user_id, bot)
    
    if is_subscribed:
        await callback.message.edit_text(
            "‚úÖ **–ü—ñ–¥–ø–∏—Å–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!**\n\n"
            "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–∞–Ω–∞–ª–∏.\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º!\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è."
        )
    else:
        from complaints_system import create_subscription_keyboard
        
        keyboard = create_subscription_keyboard()
        await callback.message.edit_text(
            "‚ùå **–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞**\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–∞–Ω–∞–ª–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É:",
            reply_markup=keyboard
        )
    
    await callback.answer()

# PRO system callback handlers
async def handle_pro_callbacks(callback: types.CallbackQuery):
    """Handle PRO-related callbacks"""
    if callback.data == "show_pro_purchase":
        from premium_aiogram import show_pro_purchase
        await show_pro_purchase(callback)
    elif callback.data == "back_to_premium":
        from premium_aiogram import back_to_premium
        await back_to_premium(callback)
    elif callback.data == "buy_pro_month":
        from premium_aiogram import start_premium_purchase
        await start_premium_purchase(callback)

async def handle_unblock_payment_callback(callback: types.CallbackQuery):
    """Handle unblock payment callback"""
    user_id = callback.from_user.id
    
    # Check if user is actually blocked
    from registration_aiogram import is_user_blocked
    if not is_user_blocked(user_id):
        await callback.message.edit_text(
            "‚úÖ **–í–∞—à –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π**\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–ª—å–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º!"
        )
        await callback.answer()
        return
    
    # Create payment invoice for 99 stars
    from aiogram.types import LabeledPrice
    
    try:
        prices = [LabeledPrice(label="–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É", amount=99)]
        
        await callback.bot.send_invoice(
            chat_id=user_id,
            title="üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É",
            description="–ú–∏—Ç—Ç—î–≤–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –∑–∞ 99‚≠ê",
            payload="unblock_account",
            provider_token="",  # For Telegram Stars, provider_token should be empty
            currency="XTR",  # Telegram Stars currency
            prices=prices,
            start_parameter="unblock_payment"
        )
        
        await callback.message.edit_text(
            "üí≥ **–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
            "üìã **–î–µ—Ç–∞–ª—ñ –ø–ª–∞—Ç–µ–∂—É:**\n"
            "‚Ä¢ –ü–æ—Å–ª—É–≥–∞: –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É\n"
            "‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å: 99‚≠ê\n"
            "‚Ä¢ –¢–∏–ø: –ú–∏—Ç—Ç—î–≤–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è\n\n"
            "üí° **–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∞—à –∞–∫–∞—É–Ω—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π!**"
        )
        
    except Exception as e:
        print(f"Error creating unblock invoice: {e}")
        await callback.message.edit_text(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É**\n\n"
            "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    
    await callback.answer()

# States for friends system are defined in bot_aiogram.py

# Register callback handlers
def register_callback_handlers(dp):
    """Register all callback handlers"""
    dp.callback_query.register(handle_callback_query)

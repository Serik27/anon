import time
from aiogram import types
from aiogram.types import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton

# Import from registration module
from registration_aiogram import get_conn

# –í–∞—Ä—Ç—ñ—Å—Ç—å —ñ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–æ–∫ (—É —Å–µ–∫—É–Ω–¥–∞—Ö)
PREMIUM_PRICES = {
    '1day': {'stars': 49, 'duration': 1 * 24 * 3600},
    '7days': {'stars': 200, 'duration': 7 * 24 * 3600},
    '30days': {'stars': 399, 'duration': 30 * 24 * 3600},
    '365days': {'stars': 999, 'duration': 365 * 24 * 3600},
    'forever': {'stars': 350, 'duration': 50 * 365 * 24 * 3600},  # 50 —Ä–æ–∫—ñ–≤ = "–Ω–∞–≤—ñ–∫–∏"
}

# PRO —Å—Ç–∞—Ç—É—Å —Ü—ñ–Ω–∞
PRO_PRICE = {
    'pro_month': {'stars': 3499, 'duration': 30 * 24 * 3600}  # 30 –¥–Ω—ñ–≤
}

# –í–∞–ª—é—Ç–∞ –¥–ª—è Stars
CURRENCY = "XTR"

# Premium benefits text
PREMIUM_BENEFITS_TEXT = """
üíé –°–ø—ñ–ª–∫—É–π—Å—è –∑ PREMIUM –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å!

üåü –ü–µ—Ä–µ–≤–∞–≥–∏:
‚Ä¢ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ—à—É–∫—É
‚Ä¢ –ø—Ä–∏—à–≤–∏–¥—á–µ–Ω–∞ —Ä–æ–±–æ—Ç–∞ –±–æ—Ç–∞
‚Ä¢ –ø–æ—à—É–∫ –ø–æ —Å—Ç–∞—Ç—ñ —Ç–∞ –≤—ñ–∫—É
‚Ä¢ –ø–æ–≤–Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏
‚Ä¢ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ª—é–±–∏—Ö —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫—ñ–≤
‚Ä¢ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏ –¥–ª—è —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤
‚Ä¢ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–∏
‚Ä¢ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
‚Ä¢ –∑–Ω–∞–∫ üíé PREMIUM –±—É–¥–µ –≤–∏–¥–Ω–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É
‚Ä¢ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ (—Å—Ç–∞—Ç—å —Ç–∞ –≤—ñ–∫)

–ó–¥—ñ–π—Å–Ω—é—é—á–∏ –ø–æ–∫—É–ø–∫—É –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ, —â–æ –æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—è —ñ –∑–≥—ñ–¥–Ω—ñ –∑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—é –∑–≥–æ–¥–æ—é.
"""

# PRO benefits text
PRO_BENEFITS_TEXT = """
üåü –ü–û–õ–£–ß–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê

üöÄ PRO —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–∞—î:
‚Ä¢ –í–°–Ü –ø–µ—Ä–µ–≤–∞–≥–∏ PREMIUM —Å—Ç–∞—Ç—É—Å—É
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑—ñ–≤ - –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
‚Ä¢ –ó–∞–ø–∏—Ç–∏ –Ω–∞ —Ä–æ–∑–º–æ–≤—É –¥–æ –¥—Ä—É–∑—ñ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥—Ä—É–∑—ñ–≤
‚Ä¢ –ê–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
‚Ä¢ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
‚Ä¢ –ó–Ω–∞–∫ üåü PRO –±—É–¥–µ –≤–∏–¥–Ω–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É
‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ PRO –∫–æ–º–∞–Ω–¥ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π

üí∞ –¶—ñ–Ω–∞: 3499‚≠ê (–Ω–∞ –º—ñ—Å—è—Ü—å)

–ó–¥—ñ–π—Å–Ω—é—é—á–∏ –ø–æ–∫—É–ø–∫—É –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ, —â–æ –æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—è —ñ –∑–≥—ñ–¥–Ω—ñ –∑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—é –∑–≥–æ–¥–æ—é.
"""

def get_premium_keyboard():
    """Get premium purchase keyboard"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåü PRO-—Å—Ç–∞—Ç—É—Å", callback_data="show_pro_purchase")],
            [InlineKeyboardButton(text="‚ö° 1 –¥–µ–Ω—å - 49‚≠ê", callback_data="buy_1day")],
            [InlineKeyboardButton(text="üî• 7 –¥–Ω—ñ–≤ - 200‚≠ê", callback_data="buy_7days")],
            [InlineKeyboardButton(text="üìÖ –ú—ñ—Å—è—Ü—å - 399‚≠ê", callback_data="buy_30days")],
            [InlineKeyboardButton(text="üéØ –†—ñ–∫ - 999‚≠ê", callback_data="buy_365days")],
            [InlineKeyboardButton(text="üéÅ –û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ", callback_data="free_premium")]
        ]
    )

def get_pro_keyboard():
    """Get PRO purchase keyboard"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåü –ö—É–ø–∏—Ç–∏ PRO - 3499‚≠ê", callback_data="buy_pro_month")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ Premium", callback_data="back_to_premium")]
        ]
    )

async def premium_menu(message: types.Message):
    """Show premium menu"""
    await message.answer(
        PREMIUM_BENEFITS_TEXT + "\n\nüåü –ü–û–õ–£–ß–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫—É:",
        reply_markup=get_premium_keyboard()
    )

async def show_pro_purchase(callback: types.CallbackQuery):
    """Show PRO purchase menu"""
    await callback.message.edit_text(
        PRO_BENEFITS_TEXT,
        reply_markup=get_pro_keyboard()
    )

async def back_to_premium(callback: types.CallbackQuery):
    """Go back to premium menu"""
    await callback.message.edit_text(
        PREMIUM_BENEFITS_TEXT + "\n\nüåü –ü–û–õ–£–ß–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫—É:",
        reply_markup=get_premium_keyboard()
    )

async def start_premium_purchase(callback: types.CallbackQuery):
    """Start premium purchase process"""
    user_id = callback.from_user.id
    option = callback.data.replace('buy_', '')
    
    print(f"start_premium_purchase –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –æ–ø—Ü—ñ—î—é: {option}")
    
    # Check if it's PRO purchase
    if option == 'pro_month':
        price_info = PRO_PRICE.get(option)
        title = "–ü–æ–∫—É–ø–∫–∞ PRO —Å—Ç–∞—Ç—É—Å—É"
    else:
        price_info = PREMIUM_PRICES.get(option)
        title = "–ü–æ–∫—É–ø–∫–∞ PREMIUM"
    
    if not price_info:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞")
        return

    amount = price_info['stars']  # aiogram 3.x –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Stars –Ω–∞–ø—Ä—è–º—É
    
    if option == 'pro_month':
        description = "PRO —Å—Ç–∞—Ç—É—Å –Ω–∞ –º—ñ—Å—è—Ü—å"
    elif option == 'forever':
        description = "–ü—Ä–µ–º—ñ—É–º –Ω–∞–∑–∞–≤–∂–¥–∏"
    elif option == '1day':
        description = "–ü—Ä–µ–º—ñ—É–º –Ω–∞ 1 –¥–µ–Ω—å"
    elif option == '7days':
        description = "–ü—Ä–µ–º—ñ—É–º –Ω–∞ 7 –¥–Ω—ñ–≤"
    elif option == '30days':
        description = "–ü—Ä–µ–º—ñ—É–º –Ω–∞ –º—ñ—Å—è—Ü—å"
    elif option == '365days':
        description = "–ü—Ä–µ–º—ñ—É–º –Ω–∞ —Ä—ñ–∫"
    else:
        description = f"–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞"
    
    payload = f"premium_{option}"
    
    print(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–≤–æ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {title}, {description}, {amount}")

    try:
        from bot_aiogram import bot
        await bot.send_invoice(
            chat_id=user_id,
            title=title,
            description=description,
            payload=payload,
            currency=CURRENCY,
            prices=[LabeledPrice(label=title, amount=amount)],
            start_parameter=f"premium_{option}",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
        await callback.answer()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def precheckout_callback(pre_checkout_query: types.PreCheckoutQuery):
    """Handle pre-checkout query"""
    await pre_checkout_query.answer(ok=True)

def add_pro_time(user_id, seconds):
    """Add PRO time to user"""
    current_time = int(time.time())
    
    conn = get_conn()
    cur = conn.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å PRO
    cur.execute('SELECT pro_until FROM users WHERE user_id = ?', (user_id,))
    row = cur.fetchone()
    
    if row and row[0] > current_time:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î PRO - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
        new_until = row[0] + seconds
    else:
        # –ù–æ–≤–∏–π PRO –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
        new_until = current_time + seconds
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    cur.execute('UPDATE users SET pro_until = ? WHERE user_id = ?', (new_until, user_id))
    conn.commit()
    conn.close()
    
    return new_until

async def successful_payment_callback(message: types.Message):
    """Handle successful payment"""
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload
    
    print(f"–£—Å–ø—ñ—à–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {payload}")
    
    # –†–æ–∑–±–∏—Ä–∞—î–º–æ payload
    if payload.startswith('premium_'):
        option = payload.replace('premium_', '')
        
        # Check if it's PRO purchase
        if option == 'pro_month':
            price_info = PRO_PRICE.get(option)
            if price_info:
                # –î–æ–¥–∞—î–º–æ PRO —á–∞—Å
                duration = price_info['duration']
                add_pro_time(user_id, duration)
                await message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ PRO —Å—Ç–∞—Ç—É—Å –Ω–∞ –º—ñ—Å—è—Ü—å! üåü")
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ PRO –ø–ª–∞—Ç–µ–∂—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
        else:
            price_info = PREMIUM_PRICES.get(option)
            if price_info:
                # –î–æ–¥–∞—î–º–æ –ø—Ä–µ–º—ñ—É–º —á–∞—Å
                duration = price_info['duration']
                add_premium_time(user_id, duration)
                
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if option == 'forever':
                    await message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º –Ω–∞–∑–∞–≤–∂–¥–∏! üíé")
                elif option == '1day':
                    await message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º –Ω–∞ 1 –¥–µ–Ω—å! üíé")
                elif option == '7days':
                    await message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º –Ω–∞ 7 –¥–Ω—ñ–≤! üíé")
                elif option == '30days':
                    await message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º –Ω–∞ –º—ñ—Å—è—Ü—å! üíé")
                elif option == '365days':
                    await message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º –Ω–∞ —Ä—ñ–∫! üíé")
                else:
                    await message.answer("üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º! üíé")
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
    else:
        await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂—É.")

def is_pro(user_id):
    """Check if user has PRO status"""
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('SELECT pro_until FROM users WHERE user_id = ?', (user_id,))
    row = cur.fetchone()
    conn.close()
    
    if row and row[0]:
        return int(time.time()) < row[0]
    return False

def get_pro_required_keyboard():
    """Get keyboard for PRO required message"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåü PRO-—Å—Ç–∞—Ç—É—Å", callback_data="show_pro_purchase")]
        ]
    )

async def send_pro_required_message(message_or_callback, command_name="–∫–æ–º–∞–Ω–¥–∞"):
    """Send message that PRO is required"""
    text = f"üåü **PRO —Å—Ç–∞—Ç—É—Å –ø–æ—Ç—Ä—ñ–±–µ–Ω**\n\n" \
           f"–¶—è {command_name} –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ PRO –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n\n" \
           f"PRO —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–∞—î:\n" \
           f"‚Ä¢ –í–°–Ü –ø–µ—Ä–µ–≤–∞–≥–∏ PREMIUM —Å—Ç–∞—Ç—É—Å—É\n" \
           f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑—ñ–≤ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è\n" \
           f"‚Ä¢ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" \
           f"‚Ä¢ –ê–Ω–æ–Ω—ñ–º–Ω–∏–π —Ä–µ–∂–∏–º\n" \
           f"‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n" \
           f"üí∞ –¶—ñ–Ω–∞: 3499‚≠ê (–Ω–∞ –º—ñ—Å—è—Ü—å)"
    
    keyboard = get_pro_required_keyboard()
    
    if hasattr(message_or_callback, 'message'):
        # It's a callback
        await message_or_callback.message.answer(text, reply_markup=keyboard)
    else:
        # It's a message
        await message_or_callback.answer(text, reply_markup=keyboard)

def is_premium(user_id):
    """Check if user has premium status (PRO users also have premium privileges)"""
    # PRO users have all premium privileges
    if is_pro(user_id):
        return True
    
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('SELECT premium_until FROM users WHERE user_id = ?', (user_id,))
    row = cur.fetchone()
    conn.close()
    
    if row and row[0]:
        return int(time.time()) < row[0]
    return False

def get_user_status(user_id):
    """Get user status: 'pro', 'premium', or 'regular'"""
    # Check PRO status first (without calling is_premium to avoid recursion)
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('SELECT pro_until FROM users WHERE user_id = ?', (user_id,))
    row = cur.fetchone()
    
    if row and row[0] and int(time.time()) < row[0]:
        conn.close()
        return 'pro'
    
    # Check premium status
    cur.execute('SELECT premium_until FROM users WHERE user_id = ?', (user_id,))
    row = cur.fetchone()
    conn.close()
    
    if row and row[0] and int(time.time()) < row[0]:
        return 'premium'
    else:
        return 'regular'

def get_premium_until(user_id):
    """Get premium expiration timestamp"""
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('SELECT premium_until FROM users WHERE user_id = ?', (user_id,))
    row = cur.fetchone()
    conn.close()
    
    return row[0] if row and row[0] else 0

def add_premium_time(user_id, seconds):
    """Add premium time to user"""
    current_time = int(time.time())
    
    conn = get_conn()
    cur = conn.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º—ñ—É–º
    cur.execute('SELECT premium_until FROM users WHERE user_id = ?', (user_id,))
    row = cur.fetchone()
    
    if row and row[0] > current_time:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—Ä–µ–º—ñ—É–º - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
        new_until = row[0] + seconds
    else:
        # –ù–æ–≤–∏–π –ø—Ä–µ–º—ñ—É–º –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
        new_until = current_time + seconds
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    cur.execute('UPDATE users SET premium_until = ? WHERE user_id = ?', (new_until, user_id))
    conn.commit()
    conn.close()
    
    return new_until

def remove_premium(user_id):
    """Remove premium status from user"""
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('UPDATE users SET premium_until = 0 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def get_premium_stats():
    """Get premium statistics"""
    conn = get_conn()
    cur = conn.cursor()
    
    current_time = int(time.time())
    
    # –ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    cur.execute('SELECT COUNT(*) FROM users WHERE premium_until > ?', (current_time,))
    active_premium = cur.fetchone()[0]
    
    # –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø—Ä–µ–º—ñ—É–º–æ–º (–≤–∫–ª—é—á–∞—é—á–∏ —Ç–∏—Ö, —É –∫–æ–≥–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è)
    cur.execute('SELECT COUNT(*) FROM users WHERE premium_until > 0')
    total_premium = cur.fetchone()[0]
    
    # –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cur.execute('SELECT COUNT(*) FROM users')
    total_users = cur.fetchone()[0]
    
    conn.close()
    
    return {
        'active_premium': active_premium,
        'total_premium': total_premium,
        'total_users': total_users,
        'premium_percentage': (active_premium / total_users * 100) if total_users > 0 else 0
    }

def get_referral_count(user_id):
    """Get referral count for user"""
    conn = get_conn()
    cur = conn.cursor()
    
    # Create referrals table if not exists
    cur.execute('''
    CREATE TABLE IF NOT EXISTS referrals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        referrer_id INTEGER NOT NULL,
        referred_id INTEGER NOT NULL,
        created_at INTEGER DEFAULT (strftime('%s', 'now'))
    )
    ''')
    
    cur.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ?', (user_id,))
    count = cur.fetchone()[0]
    conn.close()
    
    return count

def get_available_reward(referral_count, user_id=None):
    """Get available reward based on referral count"""
    rewards = [
        (50, 4 * 24 * 3600, "4 –¥–Ω—ñ"),  # 50 –¥—Ä—É–∑—ñ–≤ - 4 –¥–Ω—ñ
        (20, 24 * 3600, "1 –¥–µ–Ω—å"),     # 20 –¥—Ä—É–∑—ñ–≤ - 1 –¥–µ–Ω—å
        (10, 8 * 3600, "8 –≥–æ–¥–∏–Ω"),     # 10 –¥—Ä—É–∑—ñ–≤ - 8 –≥–æ–¥–∏–Ω
        (5, 3 * 3600, "3 –≥–æ–¥–∏–Ω–∏")      # 5 –¥—Ä—É–∑—ñ–≤ - 3 –≥–æ–¥–∏–Ω–∏
    ]
    
    # Get used rewards if user_id provided
    used_rewards = []
    if user_id:
        used_rewards = get_used_referral_rewards(user_id)
    
    print(f"DEBUG get_available_reward: referral_count={referral_count}, used_rewards={used_rewards}")
    
    for required_count, duration, description in rewards:
        print(f"DEBUG checking: required_count={required_count}, referral_count >= required_count: {referral_count >= required_count}, not in used_rewards: {required_count not in used_rewards}")
        if referral_count >= required_count and required_count not in used_rewards:
            print(f"DEBUG found reward: {required_count}, {duration}, {description}")
            return required_count, duration, description
    
    print("DEBUG: No reward found")
    return None, None, None

def get_next_reward_info(referral_count):
    """Get info about next reward"""
    rewards = [
        (5, "3 –≥–æ–¥–∏–Ω–∏"),
        (10, "8 –≥–æ–¥–∏–Ω"),
        (20, "1 –¥–µ–Ω—å"),
        (50, "4 –¥–Ω—ñ")
    ]
    
    for required_count, description in rewards:
        if referral_count < required_count:
            return required_count, description, required_count - referral_count
    
    return None, None, 0

async def show_referral_menu(callback: types.CallbackQuery):
    """Show referral menu for free premium"""
    user_id = callback.from_user.id
    
    # Get referral count
    referral_count = get_referral_count(user_id)
    
    # Create unique referral link
    from bot_aiogram import bot
    bot_info = await bot.get_me()
    username = bot_info.username
    referral_link = f"https://t.me/{username}?start=ref_{user_id}"
    
    # Get available reward
    reward_count, reward_duration, reward_description = get_available_reward(referral_count, user_id)
    
    # Debug info
    print(f"DEBUG: user_id={user_id}, referral_count={referral_count}")
    print(f"DEBUG: reward_count={reward_count}, reward_duration={reward_duration}, reward_description={reward_description}")
    
    # Get next reward info
    next_reward_count, next_reward_description, referrals_needed = get_next_reward_info(referral_count)
    
    # Create referral keyboard
    keyboard_buttons = [
        [InlineKeyboardButton(
            text="üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", 
            switch_inline_query=f"–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —á–∞—Ç—É! {referral_link}"
        )]
    ]
    
    # Always show activate button - logic will be handled in the activation function
    keyboard_buttons.append([
        InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É", callback_data="activate_referral_reward")
    ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–µ–º—ñ—É–º", callback_data="premium_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # Format referral text
    referral_text = (
        f"üéÅ **–û—Ç—Ä–∏–º–∞–π PREMIUM –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ!**\n\n"
        f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: **{referral_count}**\n"
    )
    
    if reward_count and reward_duration:
        referral_text += f"üéâ **–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞:** {reward_description} –ø—Ä–µ–º—ñ—É–º—É!\n"
        referral_text += f"üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É' —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º!\n"
    elif next_reward_count:
        referral_text += f"üéØ –î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –Ω–∞–≥–æ—Ä–æ–¥–∏: **{referrals_needed}** –¥—Ä—É–∑—ñ–≤\n"
        referral_text += f"üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É' —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—ñ!\n"
    else:
        referral_text += f"üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É' —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ!\n"
    
    referral_text += (
        f"\nüèÜ **–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–æ—Ä–æ–¥:**\n"
        f"‚Ä¢ –ó–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ - 3 –≥–æ–¥–∏–Ω–∏ –ø—Ä–µ–º—ñ—É–º—É\n"
        f"‚Ä¢ –ó–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ - 8 –≥–æ–¥–∏–Ω –ø—Ä–µ–º—ñ—É–º—É\n"
        f"‚Ä¢ –ó–∞ 20 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ - 1 –¥–µ–Ω—å –ø—Ä–µ–º—ñ—É–º—É\n"
        f"‚Ä¢ –ó–∞ 50 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ - 4 –¥–Ω—ñ –ø—Ä–µ–º—ñ—É–º—É\n\n"
        f"üîó **–¢–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:**\n`{referral_link}`\n\n"
        f"–ü–æ–¥—ñ–ª–∏—Å—å —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–∑—è–º–∏. –ö–æ–ª–∏ –≤–æ–Ω–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –±–æ–Ω—É—Å–∏!"
    )
    
    await callback.message.edit_text(
        referral_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

def init_referral_rewards_table():
    """Initialize referral rewards table"""
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('''
    CREATE TABLE IF NOT EXISTS referral_rewards (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        reward_level INTEGER NOT NULL,
        activated_at INTEGER DEFAULT (strftime('%s', 'now')),
        UNIQUE(user_id, reward_level)
    )
    ''')
    
    conn.commit()
    conn.close()

def get_used_referral_rewards(user_id):
    """Get list of used referral rewards for user"""
    # Ensure table exists
    init_referral_rewards_table()
    
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('SELECT reward_level FROM referral_rewards WHERE user_id = ?', (user_id,))
    used_rewards = [row[0] for row in cur.fetchall()]
    conn.close()
    
    return used_rewards

def mark_referral_reward_used(user_id, reward_level):
    """Mark referral reward as used"""
    # Ensure table exists
    init_referral_rewards_table()
    
    conn = get_conn()
    cur = conn.cursor()
    
    cur.execute('''
    INSERT OR IGNORE INTO referral_rewards (user_id, reward_level)
    VALUES (?, ?)
    ''', (user_id, reward_level))
    
    conn.commit()
    conn.close()

async def activate_referral_reward(callback: types.CallbackQuery):
    """Activate referral reward for user"""
    user_id = callback.from_user.id
    
    # Get referral count
    referral_count = get_referral_count(user_id)
    
    # Get available reward
    reward_count, reward_duration, reward_description = get_available_reward(referral_count, user_id)
    
    # Check if no reward available
    if not reward_count or not reward_duration:
        # Determine what user needs
        if referral_count < 5:
            needed = 5 - referral_count
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤!\n\n"
                f"–£ –≤–∞—Å: {referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ: {needed} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: 3 –≥–æ–¥–∏–Ω–∏ –ø—Ä–µ–º—ñ—É–º—É",
                show_alert=True
            )
        elif referral_count < 10:
            # Check if 5-referral reward was already used
            used_rewards = get_used_referral_rewards(user_id)
            if 5 in used_rewards:
                needed = 10 - referral_count
                await callback.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤!\n\n"
                    f"–£ –≤–∞—Å: {referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                    f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ: {needed} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                    f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: 8 –≥–æ–¥–∏–Ω –ø—Ä–µ–º—ñ—É–º—É",
                    show_alert=True
                )
            else:
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏!", show_alert=True)
        elif referral_count < 20:
            used_rewards = get_used_referral_rewards(user_id)
            if 10 in used_rewards:
                needed = 20 - referral_count
                await callback.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤!\n\n"
                    f"–£ –≤–∞—Å: {referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                    f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ: {needed} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                    f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: 1 –¥–µ–Ω—å –ø—Ä–µ–º—ñ—É–º—É",
                    show_alert=True
                )
            else:
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏!", show_alert=True)
        elif referral_count < 50:
            used_rewards = get_used_referral_rewards(user_id)
            if 20 in used_rewards:
                needed = 50 - referral_count
                await callback.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤!\n\n"
                    f"–£ –≤–∞—Å: {referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                    f"–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ: {needed} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
                    f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: 4 –¥–Ω—ñ –ø—Ä–µ–º—ñ—É–º—É",
                    show_alert=True
                )
            else:
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏!", show_alert=True)
        else:
            await callback.answer("‚ùå –í—Å—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ!", show_alert=True)
        return
    
    # Add premium time
    add_premium_time(user_id, reward_duration)
    
    # Mark reward as used
    mark_referral_reward_used(user_id, reward_count)
    
    # Success message
    await callback.answer(
        f"üéâ –ù–∞–≥–æ—Ä–æ–¥–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!\n\n"
        f"–û—Ç—Ä–∏–º–∞–Ω–æ: {reward_description} –ø—Ä–µ–º—ñ—É–º—É",
        show_alert=True
    )
    
    # Update the menu
    await show_referral_menu(callback)

# Temporary function for testing - add fake referrals
def add_test_referrals(user_id, count):
    """Add test referrals for debugging (REMOVE IN PRODUCTION)"""
    conn = get_conn()
    cur = conn.cursor()
    
    # Create referrals table if not exists
    cur.execute('''
    CREATE TABLE IF NOT EXISTS referrals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        referrer_id INTEGER NOT NULL,
        referred_id INTEGER NOT NULL,
        created_at INTEGER DEFAULT (strftime('%s', 'now'))
    )
    ''')
    
    # Add fake referrals
    for i in range(count):
        fake_user_id = 999999 + i  # Use fake user IDs
        cur.execute('''
        INSERT OR IGNORE INTO referrals (referrer_id, referred_id)
        VALUES (?, ?)
        ''', (user_id, fake_user_id))
    
    conn.commit()
    conn.close()
